#!/usr/bin/env python2
import os
import sys
import json
import time
import inspect

try:
    dbglevel = int(os.getenv("DBGLEVEL") or 0)
except:
    dbglevel = 0

conf = {}
version = "0.2.0"
plugin = "flickrannex-" + version

pwd = os.path.realpath(__file__)
pwd = pwd[:pwd.rfind("/")]
if dbglevel:
    sys.stderr.write("Path: " + repr(pwd) + "\n")

sys.path.append(pwd + '/lib')
sys.path.append(pwd + '/lib/pypng/')

import CommonFunctions as common
common.size_modifier = 1.33

import flickrapi
import png

api_key = "2f6b468927a824c00b33c4672b10d24e"
api_secret = "e28467365581abd4"

flickr = flickrapi.FlickrAPI(api_key, api_secret)
user_id = False
if not os.path.exists(pwd + "/temp"):
    os.mkdir(pwd + "/temp")
import base64

# 37566418, stalls for 49 seconds, then works.
# 37700070, stalls for 300 seconds, then fails with Exception: BadStatusLine("''",)
max_filesize = 37566418

def login(uname):
    common.log(uname)
    (token, frob) = flickr.get_token_part_one(perms='delete')
    if not token: 
        common.log("Sleeping for 30s while waiting for user to authorize program")
        time.sleep(30)
    flickr.get_token_part_two((token, frob))
    global user_id
    user_id = flickr.people_findByEmail(find_email=uname)
    user_id = user_id[0].attrib["nsid"]
    common.log("Done: " + repr(token) + " - " + repr(frob) + " - " + repr(user_id))
    return True

def verifyFileType(filename):
    common.log(repr(filename))
    status = False
    fname, ext = os.path.splitext(os.path.basename(filename))
    # Video gets converted to flv.
    # pdf gets (Horribly badly) converted to jpg
    if ext.lower() in [".jpg", ".jpeg", ".gif", ".png"]:
        common.log("Filetype can be uploaded: " + ext)
        return True
    else:
        common.log("Filetype can't be uploaded: " + ext)
        return False

def postFile(subject, filename, folder, git_top_level, encrypted=None):
    common.log("%s to %s - %s [encrypted: %s] [git_top_level: %s]" % ( repr(filename), repr(folder), subject, repr(encrypted), repr(git_top_level)))

    org_filesize = os.path.getsize(filename)
    filesize = org_filesize

    if not conf["encrypted"] and not verifyFileType(filename):
        common.log("Unencrypted flickr can only accept picture and video files")
        return False


    def func(progress, done):
        common.progress(filesize, int((filesize / 100) * progress))

    width, height, pixels, meta, text = png.Reader(filename=pwd + "/logo_small.png").read()

    tags = []
    if encrypted:
        tfile = pwd + "/temp/encoded-" + subject
        common.log("Base64 Encrypting: " + tfile)
        f = open(tfile, 'wb')
        text = common.readFile(filename, "rb")
        text = base64.b64encode(text)
    
        w = png.Writer(width, height, text={"data": text})
        w.write(f, pixels)
        f.close()
        # Get new filesize
        filesize = os.path.getsize(tfile)
        description = ""
    else:
        tfile = filename
        description = os.path.basename(tfile)
        common.log("Clean: " + tfile)

        if git_top_level:
            common.log("git top level directory: %s" % git_top_level)
            dirpath = os.path.relpath(os.path.dirname(tfile), git_top_level)
            if dirpath.find(".git") == -1:
                tags = dirpath.split(os.sep)
                common.log("Tags added to photo " + repr(tags))

    upper_limit = max_filesize
    if filesize > upper_limit:
        common.log("%s size: %s more than %s. Skipping" % ( repr(filename), os.path.getsize(filename), upper_limit), -1)
        common.updateWanted(org_filesize - 200000, False)
        return False

    common.log("Uploading: " + tfile)

    # Patch to make callback work
    # lib/flickrapi/__init__.py 
    #         def __upload_callback(percentage, done, seen_header=[True]):
    try:
        res = flickr.upload(filename=tfile, callback=func, is_public=0, title=subject, description=description, tags = '"' + '" "'.join(tags) + '"')
    except Exception as e:
        common.log("Exception: " + repr(e))
        if repr(2).find("BadStatusLine") > -1:
            common.log("Flickr error BadStatusLine usually results from too large a file. Shrinking allowed size by .2mbyte")
            common.updateWanted(org_filesize - 200000, False)

        res = ""

    if len(res):
        if isinstance(folder, int) or isinstance(folder, long):
            flickr.photosets_addPhoto(photoset_id=folder, photo_id=res[0].text)
        else:
            flickr.photosets_create(title=folder, primary_photo_id=res[0].text)

    if encrypted:
        os.unlink(pwd + "/temp/encoded-" + subject)

    if len(res):
        common.log("Done: " + repr(res))
        return True
    else:
        common.log("Failed to store: " + repr(res))
        return False

def findFile(subject, folder, root=False):
    common.log(subject + " - " + repr(folder) + " - " + repr(user_id))
    file = False
    page=1
    while not file:
        common.log("Trying page: " + repr(page))
        try:
            if root:
                photos = flickr.photosets_getPhotos(photoset_id=folder, per_page=500, page=page)
            else:
                photos = flickr.photosets_getPhotos(photoset_id=folder, per_page=500, page=page)
        except Exception as e:
            if repr(e).find("Photoset not found") > -1:
                common.log("Photoset not found")
                return False
            common.log("Exception: " + repr(e), -1)

        photos = photos.find("photoset")
        for s in photos.findall('photo'):
            ttitle = s.attrib["title"]
            common.log("Found title: " + repr(ttitle), 2)
            if ttitle == subject:
                if root:
                    file = ttitle
                else:
                    file = long(s.attrib["id"])

                common.log("Done: " + repr(file))
                return file

        if int(photos.attrib["pages"]) > page:
            page +=1
        else:
            common.log("Error, found nothing:" + repr(photos))
            common.log("Error, found nothing:" + repr(photos.attrib))
            break
    common.log("Failure: " + repr(file))
    return False

def checkFile(subject, folder):
    common.log(subject + " - " + repr(folder) + " - " + repr(user_id))

    if not isinstance(folder, int) and not isinstance(folder, long):
        common.log("No set exists, thus no files exists: " + repr(folder) +  " - " + repr(type(folder)))
        return False

    org_sub = subject

    file = findFile(subject, folder)

    if file:
        common.log("Found: " + repr(file))
        return True
    else:
        common.log("Failure")
        return False

def getFile(subject, filename, folder, encrypted=None):
    common.log(subject)

    file = findFile(subject, folder)

    if file:
        url = flickr.photos_getSizes(photo_id=file)
        url = url.find('sizes').findall('size')
        url = url[len(url) -1]

        common.log("Using: " + repr(url.attrib["label"]) + " - " + repr(url.attrib["source"]), 3)
        
        res = common.fetchPage({"link": url.attrib["source"], "progress": True})

        if encrypted:
            common.log("Base64 decrypting: " + filename)
            try:
                r=png.Reader(bytes=res["content"])
            except Exception as e:
                common.log("Exception in r=png.Reader: " + repr(e), -1)
                common.log("Exception in r=png.Reader: " + repr(res), -1)
                time.sleep(30)
            width, height, pixels, meta, text = r.read()
            text = base64.b64decode(text["data"])
            common.saveFile(filename, text, "wb")
        else:
            common.log("Clean: " + repr(filename))
            common.saveFile(filename, res["content"], "wb")

        common.log("Done")
        return True
    else:
        common.log("Failure")
        return False


def deleteFile(subject, folder):
    common.log(subject + " - " + repr(folder))

    file = findFile(subject, folder)

    if file:
        res = flickr.photos_delete(photo_id=file)
        common.log("Done: " + repr(res))
        return True
    else:
        common.log("Failure: " + repr(file))
        return False

def setFolder(base):
    common.log(repr(base))

    ANNEX_FOLDER = base
    page=1
    common.log("Photoset %s searching for %s" % (repr(ANNEX_FOLDER), repr(base)))
    while ANNEX_FOLDER == base:
        common.log("Trying page: " + repr(page))
        try:
            sets = flickr.photosets_getList(per_page=500)
        except Exception as e:
            common.log("Exception: " + repr(e), -1)
            sets = flickr.photosets_getList(per_page=500)
        sets = sets.find('photosets')
        for s in sets.findall('photoset'):
            if s[0].text == base:
                common.log("Photoset %s found: %s" % (s[0].text, repr(s[0].text)))
                ANNEX_FOLDER = long(s.attrib["id"])
                break
        if int(sets.attrib["pages"]) > page:
            page +=1
        else:
            common.log("Error. found nothing:" + repr(sets.attrib))
            break

    return ANNEX_FOLDER

## gaproto interface

def initremote(line):
    common.log("")
    uname = os.getenv("USERNAME") or ""
    myfolder = common.getConfig("folder")
    encryption = common.getConfig("encryption")

    if len(uname) and len(myfolder) and login(uname):
        common.sprint('SETCREDS mycreds ' + uname)
        common.sprint('INITREMOTE-SUCCESS')
    else:
        common.sprint('INITREMOTE-FAILURE You need to set USERNAME environment variable and folder and encryption parameters when running initremote.')
    common.log("Done")

def prepare(line):
    common.log("")
    creds = common.getCreds()

    myfolder = common.getConfig("folder")
    encryption = common.getConfig("encryption")

    if len(creds) > 2 and len(myfolder):
        conf["folder"] = myfolder
        conf["encrypted"] = encryption.lower().find("none") == -1
        if conf["encrypted"]:
            common.updateWanted(max_filesize, False)
        else:
            common.updateWanted(max_filesize, ["jpg", "jpeg", "gif", "png"])

        common.sprint('DEBUG ' + plugin)
        if login(creds[1]):
            common.sprint('PREPARE-SUCCESS')
        else:
            common.sprint('PREPARE-FAILURE Login failure.')
    else:
        common.sprint('PREPARE-FAILURE You need to set USERNAME environment variables and folder and encryption parameters for the remote.')
    common.log("Done")

def transfer(line):
    common.log("")
    
    folder = setFolder(conf["folder"])

    if line[1] == "STORE":
        if postFile(line[2], " ".join(line[3:]), folder, False, conf["encrypted"]):
            common.sprint('TRANSFER-SUCCESS STORE ' + line[2] + '')
        else:
            common.sprint('TRANSFER-FAILURE STORE ' + line[2] + ' File could not be stored')
    if line[1] == "RETRIEVE":
        if getFile(line[2], " ".join(line[3:]), folder, conf["encrypted"]):
            common.sprint('TRANSFER-SUCCESS RETRIEVE ' + line[2] + '')
        else:
            common.sprint('TRANSFER-FAILURE RETRIEVE ' + line[2] + ' File could not be retrieved')
    common.log("Done")

def checkpresent(line):
    common.log("")
    folder = setFolder(conf["folder"])
    if not folder:
        common.sprint('CHECKPRESENT-UNKNOWN ' + line[1] + ' this remote is not currently available')
        return None

    if checkFile(line[1], folder):
        common.sprint('CHECKPRESENT-SUCCESS ' + line[1] + '')
    else:
        common.sprint('CHECKPRESENT-FAILURE ' + line[1] + '')
    common.log("Done")

def remove(line):
    common.log("")
    folder = setFolder(conf["folder"])
                
    if deleteFile(line[1], folder):
        common.sprint('REMOVE-SUCCESS ' + line[1] + '')
    else:
        common.sprint('REMOVE-FAILURE ' + line[1] + ' This file could not be removed')
    common.log("Done")
   
def getCost():
    common.log("", 3)
    if conf["encrypted"]:
        common.sprint("COST 200")
    else:
        common.sprint("COST 150")

t = time.time()
common.log("START")
if __name__ == '__main__':
    common.startRemote()
common.log("STOP: %ss" % int(time.time() - t))
